apply plugin: 'com.android.application'
//Gradle3.0以上不需要这句
//apply plugin: 'com.neenbedankt.android-apt'
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.leo.annotation"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}
configurations.all {

    resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
        if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == "org.example") {
            def targetProject = findProject(":${dependency.requested.module}")
            if (targetProject != null) {
                dependency.useTarget targetProject
            }
        }
    }

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        //指定版本
        if (details.requested.name == 'appcompat-v7') {
            details.useVersion '28.0.0'
            details.because 'API breakage in higher versions'
        }
        if (details.requested.version == 'defaultVersion') {
            def version = findDefaultVersionInCatalog(details.requested.group, details.requested.name)
            details.useVersion version.version
            details.because version.because
        }
        //如果某个依赖项的版本不再使用了，可以替换版本
        if (details.requested.group == 'org.software' && details.requested.name == 'some-library' && details.requested.version == '1.2') {
            details.useVersion '1.2.1'
            details.because 'fixes critical bug in 1.2'
        }
        //如果某个库更合适
        if (details.requested.name == 'groovy-all') {
            details.useTarget group: details.requested.group, name: 'groovy', version: details.requested.version
            details.because "prefer 'groovy' over 'groovy-all'"
        }
        if (details.requested.name == 'log4j') {
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.10"
            details.because "prefer 'log4j-over-slf4j' 1.7.10 over any version of 'log4j'"
        }

    }
}

def findDefaultVersionInCatalog(String group, String name) {
    //some custom logic that resolves the default version into a specific version
    if (group.toString().equals("constraint-layout")) {
        return [version: "1.1.3", because: 'tested by QA']
    }
    return null
}

def defaultVersion;
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(':annotation')
    /*gradle3.0以上将apt替换为annotationProcessor*/
    annotationProcessor project(':testLib')
}
